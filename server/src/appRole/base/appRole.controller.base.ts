/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { AppRoleService } from "../appRole.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AppRoleCreateInput } from "./AppRoleCreateInput";
import { AppRole } from "./AppRole";
import { AppRoleFindManyArgs } from "./AppRoleFindManyArgs";
import { AppRoleWhereUniqueInput } from "./AppRoleWhereUniqueInput";
import { AppRoleUpdateInput } from "./AppRoleUpdateInput";
import { GrantFindManyArgs } from "../../grant/base/GrantFindManyArgs";
import { Grant } from "../../grant/base/Grant";
import { GrantWhereUniqueInput } from "../../grant/base/GrantWhereUniqueInput";
import { UserFindManyArgs } from "../../user/base/UserFindManyArgs";
import { User } from "../../user/base/User";
import { UserWhereUniqueInput } from "../../user/base/UserWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class AppRoleControllerBase {
  constructor(
    protected readonly service: AppRoleService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AppRole })
  @nestAccessControl.UseRoles({
    resource: "AppRole",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createAppRole(
    @common.Body() data: AppRoleCreateInput
  ): Promise<AppRole> {
    return await this.service.createAppRole({
      data: data,
      select: {
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [AppRole] })
  @ApiNestedQuery(AppRoleFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "AppRole",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async appRoles(@common.Req() request: Request): Promise<AppRole[]> {
    const args = plainToClass(AppRoleFindManyArgs, request.query);
    return this.service.appRoles({
      ...args,
      select: {
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AppRole })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "AppRole",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async appRole(
    @common.Param() params: AppRoleWhereUniqueInput
  ): Promise<AppRole | null> {
    const result = await this.service.appRole({
      where: params,
      select: {
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AppRole })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "AppRole",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateAppRole(
    @common.Param() params: AppRoleWhereUniqueInput,
    @common.Body() data: AppRoleUpdateInput
  ): Promise<AppRole | null> {
    try {
      return await this.service.updateAppRole({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AppRole })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "AppRole",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteAppRole(
    @common.Param() params: AppRoleWhereUniqueInput
  ): Promise<AppRole | null> {
    try {
      return await this.service.deleteAppRole({
        where: params,
        select: {
          createdAt: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/grants")
  @ApiNestedQuery(GrantFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Grant",
    action: "read",
    possession: "any",
  })
  async findGrants(
    @common.Req() request: Request,
    @common.Param() params: AppRoleWhereUniqueInput
  ): Promise<Grant[]> {
    const query = plainToClass(GrantFindManyArgs, request.query);
    const results = await this.service.findGrants(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/grants")
  @nestAccessControl.UseRoles({
    resource: "AppRole",
    action: "update",
    possession: "any",
  })
  async connectGrants(
    @common.Param() params: AppRoleWhereUniqueInput,
    @common.Body() body: GrantWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      grants: {
        connect: body,
      },
    };
    await this.service.updateAppRole({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/grants")
  @nestAccessControl.UseRoles({
    resource: "AppRole",
    action: "update",
    possession: "any",
  })
  async updateGrants(
    @common.Param() params: AppRoleWhereUniqueInput,
    @common.Body() body: GrantWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      grants: {
        set: body,
      },
    };
    await this.service.updateAppRole({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/grants")
  @nestAccessControl.UseRoles({
    resource: "AppRole",
    action: "update",
    possession: "any",
  })
  async disconnectGrants(
    @common.Param() params: AppRoleWhereUniqueInput,
    @common.Body() body: GrantWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      grants: {
        disconnect: body,
      },
    };
    await this.service.updateAppRole({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/users")
  @ApiNestedQuery(UserFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async findUsers(
    @common.Req() request: Request,
    @common.Param() params: AppRoleWhereUniqueInput
  ): Promise<User[]> {
    const query = plainToClass(UserFindManyArgs, request.query);
    const results = await this.service.findUsers(params.id, {
      ...query,
      select: {
        createdAt: true,
        firstName: true,
        id: true,
        lastName: true,
        roles: true,
        updatedAt: true,
        username: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/users")
  @nestAccessControl.UseRoles({
    resource: "AppRole",
    action: "update",
    possession: "any",
  })
  async connectUsers(
    @common.Param() params: AppRoleWhereUniqueInput,
    @common.Body() body: UserWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      users: {
        connect: body,
      },
    };
    await this.service.updateAppRole({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/users")
  @nestAccessControl.UseRoles({
    resource: "AppRole",
    action: "update",
    possession: "any",
  })
  async updateUsers(
    @common.Param() params: AppRoleWhereUniqueInput,
    @common.Body() body: UserWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      users: {
        set: body,
      },
    };
    await this.service.updateAppRole({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/users")
  @nestAccessControl.UseRoles({
    resource: "AppRole",
    action: "update",
    possession: "any",
  })
  async disconnectUsers(
    @common.Param() params: AppRoleWhereUniqueInput,
    @common.Body() body: UserWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      users: {
        disconnect: body,
      },
    };
    await this.service.updateAppRole({
      where: params,
      data,
      select: { id: true },
    });
  }
}
