/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AppRole } from "./AppRole";
import { AppRoleCountArgs } from "./AppRoleCountArgs";
import { AppRoleFindManyArgs } from "./AppRoleFindManyArgs";
import { AppRoleFindUniqueArgs } from "./AppRoleFindUniqueArgs";
import { CreateAppRoleArgs } from "./CreateAppRoleArgs";
import { UpdateAppRoleArgs } from "./UpdateAppRoleArgs";
import { DeleteAppRoleArgs } from "./DeleteAppRoleArgs";
import { GrantFindManyArgs } from "../../grant/base/GrantFindManyArgs";
import { Grant } from "../../grant/base/Grant";
import { UserFindManyArgs } from "../../user/base/UserFindManyArgs";
import { User } from "../../user/base/User";
import { AppRoleService } from "../appRole.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => AppRole)
export class AppRoleResolverBase {
  constructor(
    protected readonly service: AppRoleService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "AppRole",
    action: "read",
    possession: "any",
  })
  async _appRolesMeta(
    @graphql.Args() args: AppRoleCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [AppRole])
  @nestAccessControl.UseRoles({
    resource: "AppRole",
    action: "read",
    possession: "any",
  })
  async appRoles(
    @graphql.Args() args: AppRoleFindManyArgs
  ): Promise<AppRole[]> {
    return this.service.appRoles(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => AppRole, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "AppRole",
    action: "read",
    possession: "own",
  })
  async appRole(
    @graphql.Args() args: AppRoleFindUniqueArgs
  ): Promise<AppRole | null> {
    const result = await this.service.appRole(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AppRole)
  @nestAccessControl.UseRoles({
    resource: "AppRole",
    action: "create",
    possession: "any",
  })
  async createAppRole(
    @graphql.Args() args: CreateAppRoleArgs
  ): Promise<AppRole> {
    return await this.service.createAppRole({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AppRole)
  @nestAccessControl.UseRoles({
    resource: "AppRole",
    action: "update",
    possession: "any",
  })
  async updateAppRole(
    @graphql.Args() args: UpdateAppRoleArgs
  ): Promise<AppRole | null> {
    try {
      return await this.service.updateAppRole({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AppRole)
  @nestAccessControl.UseRoles({
    resource: "AppRole",
    action: "delete",
    possession: "any",
  })
  async deleteAppRole(
    @graphql.Args() args: DeleteAppRoleArgs
  ): Promise<AppRole | null> {
    try {
      return await this.service.deleteAppRole(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Grant], { name: "grants" })
  @nestAccessControl.UseRoles({
    resource: "Grant",
    action: "read",
    possession: "any",
  })
  async findGrants(
    @graphql.Parent() parent: AppRole,
    @graphql.Args() args: GrantFindManyArgs
  ): Promise<Grant[]> {
    const results = await this.service.findGrants(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [User], { name: "users" })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async findUsers(
    @graphql.Parent() parent: AppRole,
    @graphql.Args() args: UserFindManyArgs
  ): Promise<User[]> {
    const results = await this.service.findUsers(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
