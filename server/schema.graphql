# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AppRole {
  createdAt: DateTime!
  grants(orderBy: [GrantOrderByInput!], skip: Float, take: Float, where: GrantWhereInput): [Grant!]!
  id: String!
  name: String!
  updatedAt: DateTime!
  users(orderBy: [UserOrderByInput!], skip: Float, take: Float, where: UserWhereInput): [User!]!
}

input AppRoleCreateInput {
  grants: GrantCreateNestedManyWithoutAppRolesInput
  name: String!
  users: UserCreateNestedManyWithoutAppRolesInput
}

input AppRoleCreateNestedManyWithoutGrantsInput {
  connect: [AppRoleWhereUniqueInput!]
}

input AppRoleCreateNestedManyWithoutUsersInput {
  connect: [AppRoleWhereUniqueInput!]
}

input AppRoleListRelationFilter {
  every: AppRoleWhereInput
  none: AppRoleWhereInput
  some: AppRoleWhereInput
}

input AppRoleOrderByInput {
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input AppRoleUpdateInput {
  grants: GrantUpdateManyWithoutAppRolesInput
  name: String
  users: UserUpdateManyWithoutAppRolesInput
}

input AppRoleUpdateManyWithoutGrantsInput {
  connect: [AppRoleWhereUniqueInput!]
  disconnect: [AppRoleWhereUniqueInput!]
  set: [AppRoleWhereUniqueInput!]
}

input AppRoleUpdateManyWithoutUsersInput {
  connect: [AppRoleWhereUniqueInput!]
  disconnect: [AppRoleWhereUniqueInput!]
  set: [AppRoleWhereUniqueInput!]
}

input AppRoleWhereInput {
  grants: GrantListRelationFilter
  id: StringFilter
  name: StringFilter
  users: UserListRelationFilter
}

input AppRoleWhereUniqueInput {
  id: String!
}

input BooleanFilter {
  equals: Boolean
  not: Boolean
}

input Credentials {
  password: String!
  username: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Grant {
  appRoles(orderBy: [AppRoleOrderByInput!], skip: Float, take: Float, where: AppRoleWhereInput): [AppRole!]!
  createdAt: DateTime!
  id: String!
  name: String!
  updatedAt: DateTime!
}

input GrantCreateInput {
  appRoles: AppRoleCreateNestedManyWithoutGrantsInput
  name: String!
}

input GrantCreateNestedManyWithoutAppRolesInput {
  connect: [GrantWhereUniqueInput!]
}

input GrantListRelationFilter {
  every: GrantWhereInput
  none: GrantWhereInput
  some: GrantWhereInput
}

input GrantOrderByInput {
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input GrantUpdateInput {
  appRoles: AppRoleUpdateManyWithoutGrantsInput
  name: String
}

input GrantUpdateManyWithoutAppRolesInput {
  connect: [GrantWhereUniqueInput!]
  disconnect: [GrantWhereUniqueInput!]
  set: [GrantWhereUniqueInput!]
}

input GrantWhereInput {
  appRoles: AppRoleListRelationFilter
  id: StringFilter
  name: StringFilter
}

input GrantWhereUniqueInput {
  id: String!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type MetaQueryPayload {
  count: Float!
}

type Mutation {
  createAppRole(data: AppRoleCreateInput!): AppRole!
  createGrant(data: GrantCreateInput!): Grant!
  createTask(data: TaskCreateInput!): Task!
  createUser(data: UserCreateInput!): User!
  deleteAppRole(where: AppRoleWhereUniqueInput!): AppRole!
  deleteGrant(where: GrantWhereUniqueInput!): Grant!
  deleteTask(where: TaskWhereUniqueInput!): Task!
  deleteUser(where: UserWhereUniqueInput!): User!
  login(credentials: Credentials!): UserInfo!
  signup(credentials: Credentials!): UserInfo!
  updateAppRole(data: AppRoleUpdateInput!, where: AppRoleWhereUniqueInput!): AppRole!
  updateGrant(data: GrantUpdateInput!, where: GrantWhereUniqueInput!): Grant!
  updateTask(data: TaskUpdateInput!, where: TaskWhereUniqueInput!): Task!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User!
}

type Query {
  _appRolesMeta(where: AppRoleWhereInput): MetaQueryPayload!
  _grantsMeta(where: GrantWhereInput): MetaQueryPayload!
  _tasksMeta(where: TaskWhereInput): MetaQueryPayload!
  _usersMeta(where: UserWhereInput): MetaQueryPayload!
  appRole(where: AppRoleWhereUniqueInput!): AppRole
  appRoles(orderBy: [AppRoleOrderByInput!], skip: Float, take: Float, where: AppRoleWhereInput): [AppRole!]!
  grant(where: GrantWhereUniqueInput!): Grant
  grants(orderBy: [GrantOrderByInput!], skip: Float, take: Float, where: GrantWhereInput): [Grant!]!
  me: User!
  task(where: TaskWhereUniqueInput!): Task
  tasks(orderBy: [TaskOrderByInput!], skip: Float, take: Float, where: TaskWhereInput): [Task!]!
  user(where: UserWhereUniqueInput!): User
  userInfo: UserInfo!
  users(orderBy: [UserOrderByInput!], skip: Float, take: Float, where: UserWhereInput): [User!]!
}

enum QueryMode {
  Default
  Insensitive
}

enum SortOrder {
  Asc
  Desc
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: String
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: String
  notIn: [String!]
  startsWith: String
}

type Task {
  completed: Boolean!
  createdAt: DateTime!
  id: String!
  text: String!
  uid: String
  updatedAt: DateTime!
}

input TaskCreateInput {
  completed: Boolean!
  text: String!
  uid: String
}

input TaskOrderByInput {
  completed: SortOrder
  createdAt: SortOrder
  id: SortOrder
  text: SortOrder
  uid: SortOrder
  updatedAt: SortOrder
}

input TaskUpdateInput {
  completed: Boolean
  text: String
  uid: String
}

input TaskWhereInput {
  completed: BooleanFilter
  id: StringFilter
  text: StringFilter
  uid: StringNullableFilter
}

input TaskWhereUniqueInput {
  id: String!
}

type User {
  appRoles(orderBy: [AppRoleOrderByInput!], skip: Float, take: Float, where: AppRoleWhereInput): [AppRole!]!
  createdAt: DateTime!
  firstName: String
  id: String!
  lastName: String
  roles: JSON!
  updatedAt: DateTime!
  username: String!
}

input UserCreateInput {
  appRoles: AppRoleCreateNestedManyWithoutUsersInput
  firstName: String
  lastName: String
  password: String!
  roles: JSON!
  username: String!
}

input UserCreateNestedManyWithoutAppRolesInput {
  connect: [UserWhereUniqueInput!]
}

type UserInfo {
  accessToken: String
  id: String!
  roles: [String!]!
  username: String!
}

input UserListRelationFilter {
  every: UserWhereInput
  none: UserWhereInput
  some: UserWhereInput
}

input UserOrderByInput {
  createdAt: SortOrder
  firstName: SortOrder
  id: SortOrder
  lastName: SortOrder
  password: SortOrder
  roles: SortOrder
  updatedAt: SortOrder
  username: SortOrder
}

input UserUpdateInput {
  appRoles: AppRoleUpdateManyWithoutUsersInput
  firstName: String
  lastName: String
  password: String
  roles: JSON
  username: String
}

input UserUpdateManyWithoutAppRolesInput {
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
}

input UserWhereInput {
  appRoles: AppRoleListRelationFilter
  firstName: StringNullableFilter
  id: StringFilter
  lastName: StringNullableFilter
  username: StringFilter
}

input UserWhereUniqueInput {
  id: String!
}